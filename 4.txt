                 Lab Assignment 4
Shape:
package shape;

/**
 *
 * @author s pc
 */
public class Circle  implements Shape1{

   
    @Override
    public void Draw() {
        System.out.println(" Circle has draw() method."  +"Make a happy day");
    }
    
}
package shape;

/**
 *
 * @author ali pc
 */
public class Rectangle implements Shape1  {

    @Override
    public void Draw() {
         System.out.println("Rectangle has draw() method."+"hey momo and aadarsh ,whts up!");
   }
    }
package shape;

/**
 *
 * @author s pc
 */
public class Shape {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        // TODO code application logic here
    }
    
}
package shape;

/**
 *
 * @author s pc
 */
public interface Shape1 {
    void Draw();
    
}
package shape;

/**
 *
 * @author ali pc
 */
public  class Square implements Shape1 {

    @Override
    public void Draw() {
        System.out.println(" Square has draw() method."+"Today is my day");
    }
    
}
package shape;

/**
 *
 * @author s pc
 */
public class factorypatterndemo {
     public static void main(String[] args) {
      shapefactory shapeFactory = new shapefactory();

      //get an object of Circle and call its draw method.
      Shape1 shape3 = shapeFactory.getShape2("CIRCLE");

      //call draw method of Circle
      shape3.Draw();

      //get an object of Rectangle and call its draw method.
      Shape1 shape4 = shapeFactory.getShape2("RECTANGLE");

      //call draw method of Rectangle
      shape4.Draw();

      //get an object of Square and call its draw method.
      Shape1 shape5 = shapeFactory.getShape2("SQUARE");

      //call draw method of square
      shape5.Draw();
   }
}
    
package shape;

/**
 *
 * @author s pc
 */
public class shapefactory {
     
    
    public Shape1 getShape2(String shapeType){
      if(shapeType == null){
         return null;
      }		
      if(shapeType.equalsIgnoreCase("CIRCLE")){
         return new Circle();
         
      } else if(shapeType.equalsIgnoreCase("RECTANGLE")){
         return new Rectangle();
         
      } else if(shapeType.equalsIgnoreCase("SQUARE")){
         return new Square();
      }
      
      return null;
    
}
}


Q2. Abstract Factory method.
package shape1;

/**
 *
 * @author s pc
 */
public abstract class AbstractFactory {
    abstract shape getShape2(String shapeType) ;
    abstract Color getColor(String colorType) ;
}
public class AbstractFactoryPatternDemo {
     public static void main(String[] args) {

      AbstractFactory shapeFactory = FactoryProducer.getFactory(false);
    
      shape shape1 = shapeFactory.getShape2("RECTANGLE");
      
      shape1.draw();
      
      shape shape2 = shapeFactory.getShape2("SQUARE");
      
      shape2.draw();
      
      AbstractFactory shapeFactory1 = FactoryProducer.getFactory(true);
     
      shape shape3 = shapeFactory1.getShape2("RECTANGLE");
     
      shape3.draw();
      
      shape shape4 = shapeFactory1.getShape2("SQUARE");
      
      shape4.draw();
    
}
}
package shape1;

/**
 *
 * @author s pc
 */
public class Blue implements Color{
     @Override
   public void fill() {
      System.out.println("Rectangle::fill() method."+"having Blue rose");

      System.out.println("Circle::fill() method."+"having Blue color");

      System.out.println("Square::fill() method."+"having Blue face");
    
    
}
}
public class Circle implements shape {
     @Override
   public void draw() {
      System.out.println("Circle ::draw() method."+"Behtareen");
    
}
}
public interface Color {
    void fill();
    
}
public abstract class ColorFactory extends AbstractFactory{

   
    @Override
    public Color getColor(String colorType) {
        if(colorType.equalsIgnoreCase("RECTANGLE")){
         return new Red();         
      }else if(colorType.equalsIgnoreCase("SQUARE")){
         return new Green();
      }	 
      else if(colorType.equalsIgnoreCase("CIRCLE")){
         return new Blue();
      }
      return null; 
    }
public class FactoryProducer {
    public static AbstractFactory getFactory(boolean Rounded){   
      if(Rounded){
         return new ColorFactory() {

             @Override
             public shape getShape2(String shapeType) {
                if(shapeType.equalsIgnoreCase("RECTANGLE")){
         return new Rectangle();         
      }else if(shapeType.equalsIgnoreCase("SQUARE")){
         return new Square();
      }	 
      else if(shapeType.equalsIgnoreCase("CIRCLE")){
         return new Circle();
      }
      return null; 
    }
             
         };         
      }else{
         return new ShapeFactory() {

             @Override
             Color getColor(String colorType) {
                 if(colorType.equalsIgnoreCase("RECTANGLE")){
         return new Red();         
      }else if(colorType.equalsIgnoreCase("SQUARE")){
         return new Green();
      }	 
      else if(colorType.equalsIgnoreCase("CIRCLE")){
         return new Blue();
      }
      return null; 
             }
         };
                 }
    }
}
public class Green implements Color{
     @Override
   public void fill() {
      System.out.println("Rectangle::fill() method."+"having Green rose");

      System.out.println("Circle::fill() method."+"having Green color");

      System.out.println("Square::fill() method."+"having Green face");
    
    
    
}
}
ublic class Rectangle implements shape{
    @Override
   public void draw() {
      System.out.println("Rectangle::draw() method."+"tanhai");
}
}
public class Red implements Color{
     @Override
   public void fill() {
      System.out.println("Rectangle::fill() method."+"having red rose");

      System.out.println("Circle::fill() method."+"having red color");

      System.out.println("Square::fill() method."+"having red face");
    
}
}
public abstract class ShapeFactory extends AbstractFactory{

     @Override
        public shape getShape2(String shapeType){    
      if(shapeType.equalsIgnoreCase("RECTANGLE")){
         return new Rectangle();         
      }else if(shapeType.equalsIgnoreCase("SQUARE")){
         return new Square();
      }	 
      else if(shapeType.equalsIgnoreCase("CIRCLE")){
         return new Circle();
      }
      return null; 
    }
public class Square implements shape{
     @Override
   public void draw() {
      System.out.println("Square::draw() method."+"Dost");
    
}
}
public interface shape {
    void draw();
    
}
